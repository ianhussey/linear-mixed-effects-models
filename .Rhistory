schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
lines(density(IAT_data_outliers_removed$rt), col = "green")
plot(density(IAT_data_outliers_removed$rt), col = "green")
plot(density(IAT_data_outliers_removed$rt), col = "blue")
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2,
lower.z = -2)
lines(density(IAT_data_outliers_removed$rt), col = "green")
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 1,
lower.z = -1)
lines(density(IAT_data_outliers_removed$rt), col = "red")
model_1 <- afex::mixed(rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
summary(model_1)
print(model_1)  # same as using anova() here
model_2 <- generalTestBF(rt ~ block * condition + participant,
whichRandom = "participant",  # random factors
data = IAT_data_outliers_removed,
rscaleFixed = "medium",  # default
rscaleCont = "medium",  # default
rscaleRandom = "nuisance",  # default
multicore = TRUE)
model_2
model_2[9] / model_2[8]
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 1,
lower.z = -1) %>%
summarize(x = mean(rt))
IAT_data_outliers_removed
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5) %>%
summarize(x = mean(rt))
IAT_data_outliers_removed
library(ez)
library(dplyr)
library(car)
library(schoRsch)
library(afex)  # stacks on top of lmer for p values, eta2 etc
library(BayesFactor)
library(simr) # for power calculations via powerSim
setwd("/Users/Ian/git/linear mixed effects models/")
IAT_data <-
read.csv("long data.csv") %>%
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant))
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
library(pim)
model_X <- pim(rt ~ block * condition,
data = IAT_data)
model_X
summary(model_X)
ptm <- proc.time()
model_X <- pim(rt ~ block * condition,
data = IAT_data)
# Stop the clock
proc.time() - ptm
library(ez)
library(dplyr)
library(car)
library(schoRsch)
library(afex)  # stacks on top of lmer for p values, eta2 etc
library(BayesFactor)
library(simr) # for power calculations via powerSim
setwd("/Users/Ian/git/linear mixed effects models/")
IAT_data <-
read.csv("long data.csv") %>%
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
recip_rt = 1/rt)
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
View(IAT_data)
View(IAT_data)
plot(density(IAT_data$recip_rt), col = "blue")
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5) %>%
schoRsch::outlier(dv = "recip_rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
plot(density(IAT_data_outliers_removed$recip_rt), col = "blue")
plot(density(IAT_data_outliers_removed$rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C1_block" ]), col = "red")
plot(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C1_block" ]), col = "red")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "green")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C1_block"]), col = "blue")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "magenta")
plot(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C1_block" ]), col = "red")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "green")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C1_block"]), col = "blue")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "magenta")
with(IAT_data_outliers_removed, interaction.plot(block, condition, rt))
with(IAT_data_outliers_removed, interaction.plot(block, condition, recip_rt))
model_1 <- afex::mixed(recip_rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
summary(model_1)
print(model_1)  # same as using anova() here
summary(model_1)
print(model_1)  # same as using anova() here
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
plot(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C1_block" ]), col = "red")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "green")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C1_block"]), col = "blue")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "magenta")
IAT_data <-
read.csv("long data.csv") %>%
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
recip_rt = 1/rt)
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
plot(density(IAT_data$rt), col = "red")
lines(density(IAT_data_outliers_removed$rt), col = "blue")
plot(density(IAT_data_outliers_removed$rt), col = "blue")
plot(density(IAT_data_outliers_removed$recip_rt), col = "blue")
plot(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C1_block" ]), col = "red")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "green")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C1_block"]), col = "blue")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "magenta")
with(IAT_data_outliers_removed, interaction.plot(block, condition, recip_rt))
model_1 <- afex::mixed(recip_rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
summary(model_1)
print(model_1)  # same as using anova() here
sink("1 frequentist linear mixed effects model.txt")
sink()
model_2 <- generalTestBF(recip_rt ~ block * condition + participant,
whichRandom = "participant",  # random factors
data = IAT_data_outliers_removed,
rscaleFixed = "medium",  # default
rscaleCont = "medium",  # default
rscaleRandom = "nuisance",  # default
multicore = TRUE)
model_2
model_2[9] / model_2[8]
setwd("/Users/Ian/git/linear mixed effects models/")
IAT_data <-
read.csv("long data.csv") %>%
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
recip_rt = 1/rt)
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
plot(density(IAT_data$rt), col = "red")
lines(density(IAT_data_outliers_removed$rt), col = "blue")
plot(density(IAT_data_outliers_removed$rt), col = "blue")
plot(density(IAT_data_outliers_removed$recip_rt), col = "blue")
plot(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C1_block" ]), col = "red")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "green")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C1_block"]), col = "blue")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "magenta")
with(IAT_data_outliers_removed, interaction.plot(block, condition, recip_rt))
model_1 <- afex::mixed(recip_rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5) %>%
schoRsch::outlier(dv = "recip_rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
IAT_data <-
read.csv("long data.csv") %>%
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
recip_rt = 1/rt)
IAT_data <-
read.csv("long data.csv") %>%
filter(rt > 0) %>%
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
recip_rt = 1/rt)
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
plot(density(IAT_data$rt), col = "red")
lines(density(IAT_data_outliers_removed$rt), col = "blue")
plot(density(IAT_data_outliers_removed$rt), col = "blue")
plot(density(IAT_data_outliers_removed$recip_rt), col = "blue")
plot(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C1_block" ]), col = "red")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "green")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C1_block"]), col = "blue")
lines(density(IAT_data_outliers_removed$recip_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "magenta")
with(IAT_data_outliers_removed, interaction.plot(block, condition, recip_rt))
model_1 <- afex::mixed(recip_rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
summary(model_1)
print(model_1)  # same as using anova() here
sink("1 frequentist linear mixed effects model - reciprocal transformation.txt")
summary(model_1)
print(model_1)  # same as using anova() here
sink()
model_2 <- generalTestBF(recip_rt ~ block * condition + participant,
whichRandom = "participant",  # random factors
data = IAT_data_outliers_removed,
rscaleFixed = "medium",  # default
rscaleCont = "medium",  # default
rscaleRandom = "nuisance",  # default
multicore = TRUE)
model_2
model_2[9] / model_2[8]
sink("2 BF linear mixed effects model - reciprocal transformation.txt")
cat("FULL MODEL \n\n")
model_2
cat("\n\nINTERACTION ONLY (FULL MODEL DIVIDED BY NON-INTERACTIN MODEL) \n\n")
model_2[9] / model_2[8]
sink()
IAT_data <-
read.csv("long data.csv") %>%
filter(rt > 0) %>%
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
log_rt = log(rt))
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
plot(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C1_block" ]), col = "red")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "green")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C1_block"]), col = "blue")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "magenta")
with(IAT_data_outliers_removed, interaction.plot(block, condition, log_rt))
model_1 <- afex::mixed(log_rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
summary(model_1)
print(model_1)  # same as using anova() here
sink("1 frequentist linear mixed effects model - log transformation.txt")
summary(model_1)
print(model_1)  # same as using anova() here
sink()
model_2 <- generalTestBF(log_rt ~ block * condition + participant,
whichRandom = "participant",  # random factors
data = IAT_data_outliers_removed,
rscaleFixed = "medium",  # default
rscaleCont = "medium",  # default
rscaleRandom = "nuisance",  # default
multicore = TRUE)
model_2
model_2[9] / model_2[8]
sink("2 BF linear mixed effects model - log transformation.txt")
cat("FULL MODEL \n\n")
model_2
cat("\n\nINTERACTION ONLY (FULL MODEL DIVIDED BY NON-INTERACTIN MODEL) \n\n")
model_2[9] / model_2[8]
sink()
IAT_data <-
read.csv("long data.csv") %>%
filter(rt > 0) %>%
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
rt = log(rt))
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
model_1 <- afex::mixed(rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
summary(model_1)
print(model_1)  # same as using anova() here
sink("1 frequentist linear mixed effects model.txt")
summary(model_1)
print(model_1)  # same as using anova() here
sink()
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5) %>%
schoRsch::outlier(dv = "log_rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
IAT_data <-
read.csv("long data.csv") %>%
filter(rt > 0) %>%
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
log_rt = log(rt))
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5) %>%
schoRsch::outlier(dv = "log_rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
IAT_data <-
read.csv("long data.csv") %>%
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
log_rt = log(rt))
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5) %>%
schoRsch::outlier(dv = "log_rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
IAT_data <-
read.csv("long data.csv") %>%
filter(rt > 0) %>%  # log transformations require rts of 0 to be removed.
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
log_rt = log(rt))
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5) %>%
schoRsch::outlier(dv = "log_rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
plot(density(IAT_data$rt), col = "red")
lines(density(IAT_data_outliers_removed$rt), col = "blue")
plot(density(IAT_data$log_rt), col = "red")
lines(density(IAT_data_outliers_removed$log_rt), col = "blue")
plot(density(IAT_data$log_rt), col = "red")
lines(density(IAT_data_outliers_removed$log_rt), col = "blue")
plot(density(IAT_data_outliers_removed$log_rt), col = "blue")
plot(density(IAT_data_outliers_removed$log_rt), col = "blue")
plot(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C1_block" ]), col = "red")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "green")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C1_block"]), col = "blue")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "magenta")
with(IAT_data_outliers_removed, interaction.plot(block, condition, log_rt))
model_1 <- afex::mixed(log_rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
summary(model_1)
print(model_1)  # same as using anova() here
sink("1 frequentist linear mixed effects model - log transformation.txt")
summary(model_1)
print(model_1)  # same as using anova() here
sink()
model_2 <- generalTestBF(log_rt ~ block * condition + participant,
whichRandom = "participant",  # random factors
data = IAT_data_outliers_removed,
rscaleFixed = "medium",  # default
rscaleCont = "medium",  # default
rscaleRandom = "nuisance",  # default
multicore = TRUE)
model_2
model_2[9] / model_2[8]
sink("2 BF linear mixed effects model - log transformation.txt")
cat("FULL MODEL \n\n")
model_2
cat("\n\nINTERACTION ONLY (FULL MODEL DIVIDED BY NON-INTERACTIN MODEL) \n\n")
model_2[9] / model_2[8]
sink()
model_0 <- lm(log_rt ~ block * condition, # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
type = 3)
model_0 <- lm(log_rt ~ block * condition, # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed)
Anova(model_0, type = "III")
summary(model_1)
print(model_1)  # same as using anova() here
plot(density(IAT_data$rt), col = "red")
lines(density(IAT_data_outliers_removed$rt), col = "blue")
plot(density(IAT_data_outliers_removed$rt), col = "blue")
plot(density(IAT_data$log_rt), col = "red")
lines(density(IAT_data_outliers_removed$log_rt), col = "blue")
plot(density(IAT_data_outliers_removed$log_rt), col = "blue")
plot(density(IAT_data_outliers_removed$rt), col = "blue")
plot(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C1_block" ]), col = "red")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "green")
plot(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C1_block" ]), col = "red")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "green")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C1_block"]), col = "blue")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "magenta")
with(IAT_data_outliers_removed, interaction.plot(block, condition, log_rt))
