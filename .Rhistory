?slice
subsample_participants <- cleaned_df %>% distinct(participant) %>% slice(1:50)
inner_join()
?inner_join
cleaned_df <- inner_join(subsample_participants)
cleaned_df <- cleaned_df %>% inner_join(subsample_participants)
cleaned_df <- cleaned_df %>% inner_join(subsample_participants, by = "participant")
```{r}
plot(cars)
# title: process IAT data
# author: Ian Hussey (ian.hussey@ugent.be)
# license:
#   code: GPLv3+        https://www.gnu.org/licenses/quick-guide-gplv3.en.html
#   data: CC BY 4.0     https://creativecommons.org/licenses/by/4.0/
#         please cite:  Hussey, I., & Hughes, S. (2016). Transitive relations and implicit attitudes. Dataset. osf.io/5nxby
# Clean the workspace
rm(list=ls())
# Dependencies ------------------------------------------------------------
library(plyr)
library(tidyverse)
library(data.table)
# Data acquisition and cleaning -------------------------------------------
## Set the working directory
setwd("/Users/Ian/Dropbox/Work/Projects/Alphabet soup/Hussey & Hughes - Derivation study/OSF - Transitive relations and implicit attitudes/Experiment 3/Raw Data")
# Read all files with the .iqdat extension
files <- list.files(pattern = "\\.csv$")
# Read these files sequentially into a single data frame
input_df <- dplyr::tbl_df(plyr::rbind.fill(lapply(files, data.table::fread, header = TRUE)))  # tbl_df() requires dplyr, rbind.fill() requires plyr, fread requires data.table
# Make some variable names more transparent
cleaned_df <-
input_df %>%
dplyr::select(subject,
date,
time,
blockcode,  # name of block
blocknum,
trialnum,
response,  # for string responses
correct,
latency,
trialcode) %>%
dplyr::rename(participant = subject,
block_name = blockcode,
block_n = blocknum,
trial_n = trialnum,
string_response = response,
accuracy = correct,
rt = latency) %>%
dplyr::mutate(participant = as.numeric(participant),
block_n = as.numeric(block_n),
trial_n = as.numeric(trial_n),
accuracy = as.numeric(accuracy),
rt = as.numeric(rt),
condition = ifelse(participant %% 2 == 1, 1, ifelse(participant %% 2 == 0, 2, NA)))  # condition was assigned based on odd/even participant code
# MANUAL INCLUSIONS HERE - ONLY THOSE WITH COMPLETE DATA
inclusion_df <- read.csv("/Users/Ian/Dropbox/Work/Projects/Alphabet soup/Hussey & Hughes - Derivation study/OSF - Transitive relations and implicit attitudes/Experiment 3/Processed data/inclusion list.csv")
cleaned_df <- dplyr::inner_join(cleaned_df, inclusion_df, by = "participant")
# subsample data ----------------------------------------------------------
# full dataset is not needed to demo the analyses
subsample_participants <-
cleaned_df %>%
distinct(participant) %>%
slice(1:50)  # first 50 participants
cleaned_df <-
cleaned_df %>%
inner_join(subsample_participants, by = "participant")  # include only participant codes from the above slice
# extract IAT rts ---------------------------------------------------------
IAT_data <-
cleaned_df %>%
dplyr::filter(block_name == "IAT_test_compatible_block" | block_name == "IAT_test_incompatible_block") %>%
dplyr::mutate(block = ifelse(block_name == "IAT_test_compatible_block", 1, 2)) %>%
dplyr::select(participant,
condition,
block,
trial_n,
rt,
accuracy)
# Write to disk -----------------------------------------------------------
IAT_data %>% write.csv(file = "/Users/Ian/git/linear mixed effects models/example data.csv", row.names = FALSE)
library(ez)
library(dplyr)
library(car)
library(schoRsch)
library(afex)  # stacks on top of lmer for p values, eta2 etc
library(BayesFactor)
library(simr) # for power calculations via powerSim
library(pim)
setwd("/Users/Ian/git/linear mixed effects models/")
IAT_data <-
read.csv("long data.csv") %>%
filter(rt > 0) %>%  # log transformations require rts of 0 to be removed.
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
log_rt = log(rt))
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5) %>%
schoRsch::outlier(dv = "log_rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
plot(density(IAT_data$rt), col = "red")
lines(density(IAT_data_outliers_removed$rt), col = "blue")
plot(density(IAT_data_outliers_removed$rt), col = "blue")
plot(density(IAT_data$log_rt), col = "red")
lines(density(IAT_data_outliers_removed$log_rt), col = "blue")
plot(density(IAT_data_outliers_removed$log_rt), col = "blue")
plot(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C1_block" ]), col = "red")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "green")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C1_block"]), col = "blue")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "magenta")
with(IAT_data_outliers_removed, interaction.plot(block, condition, log_rt))
model_1 <- afex::mixed(log_rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
save(model_1, file = "model_1_lmm_freq.RData")
summary(model_1)
print(model_1)  # same as using anova() here
sink("1 frequentist linear mixed effects model - log transformation.txt")
summary(model_1)
print(model_1)  # same as using anova() here
sink()
model_2 <- generalTestBF(log_rt ~ block * condition + participant,
whichRandom = "participant",  # random factors
data = IAT_data_outliers_removed,
rscaleFixed = "medium",  # default
rscaleCont = "medium",  # default
rscaleRandom = "nuisance",  # default
multicore = TRUE)
save(model_2, file = "model_2_lmm_BF.RData")
model_2
model_2[9] / model_2[8]
sink("2 BF linear mixed effects model - log transformation.txt")
cat("FULL MODEL \n\n")
model_2
cat("\n\nINTERACTION ONLY (FULL MODEL DIVIDED BY NON-INTERACTIN MODEL) \n\n")
model_2[9] / model_2[8]
sink()
model_2
model_2[9] / model_2[8]
save(model_2, file = "model_2_lmm_BF.RData")
IAT_data <-
read.csv("example data.csv") %>%
filter(rt > 0) %>%  # log transformations require rts of 0 to be removed.
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
log_rt = log(rt))
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5) %>%
schoRsch::outlier(dv = "log_rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
plot(density(IAT_data$rt), col = "red")
lines(density(IAT_data_outliers_removed$rt), col = "blue")
plot(density(IAT_data_outliers_removed$rt), col = "blue")
plot(density(IAT_data$log_rt), col = "red")
lines(density(IAT_data_outliers_removed$log_rt), col = "blue")
plot(density(IAT_data_outliers_removed$log_rt), col = "blue")
plot(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C1_block" ]), col = "red")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_first" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "green")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C1_block"]), col = "blue")
lines(density(IAT_data_outliers_removed$log_rt[IAT_data_outliers_removed$condition == "IAT_second" &
IAT_data_outliers_removed$block == "B1C2_block"]), col = "magenta")
model_1 <- afex::mixed(log_rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
type = 3,  # sum of squares
method = "KR",  # Kenward-Roger method of approximation of df for p values. Parametic bootstrapping ("PB") and liklihood ratio tests ("LR") also available.
progress = TRUE,
return = "mixed")
save(model_1, file = "model_1_lmm_freq.RData")
summary(model_1)
print(model_1)  # same as using anova() here
sink("1 frequentist linear mixed effects model - log transformation.txt")
summary(model_1)
print(model_1)  # same as using anova() here
sink()
model_2 <- generalTestBF(log_rt ~ block * condition + participant,
whichRandom = "participant",  # random factors
data = IAT_data_outliers_removed,
rscaleFixed = "medium",  # default
rscaleCont = "medium",  # default
rscaleRandom = "nuisance",  # default
multicore = TRUE)
save(model_2, file = "model_2_lmm_BF.RData")
model_2
model_2[9] / model_2[8]
sink("2 BF linear mixed effects model - log transformation.txt")
cat("FULL MODEL \n\n")
model_2
cat("\n\nINTERACTION ONLY (FULL MODEL DIVIDED BY NON-INTERACTIN MODEL) \n\n")
model_2[9] / model_2[8]
sink()
library(lavaan)
library(semPlot)
library(semTools)
library(dplyr)
library(biotools)
setwd("/Users/Ian/Dropbox/Work/Projects/Aoife collaborations/IRAP experiments/Gender IRAP CFA/Analysis/")
Data <-
read.csv("gender stereotypes IRAP dataset.csv", check.names=TRUE) %>%
filter(failedPracticeBlocks == 0)
DataCFA <- Data[,c(2,8:11)]
names(DataCFA) <- c("Gender","MM","MF", "WM", "WF")
model_0_free_parameters_men <-
cfa(model,
data = DataCFA[DataCFA$Gender == "Male",])                                    # free parameters
model_0_free_parameters <-
cfa(model,
data = DataCFA,
group = "Gender")                                                             # free parameters, group comparison
library(lavaan)
library(semPlot)
library(semTools)
library(dplyr)
library(biotools)
setwd("/Users/Ian/Dropbox/Work/Projects/Aoife collaborations/IRAP experiments/Gender IRAP CFA/Analysis/")
Data <-
read.csv("gender stereotypes IRAP dataset.csv", check.names=TRUE) %>%
filter(failedPracticeBlocks == 0)
DataCFA <- Data[,c(2,8:11)]
names(DataCFA) <- c("Gender","MM","MF", "WM", "WF")
model <- "Imp=~ lam1*MM + lam2*MF + lam3*WM + lam4*WF"
model_0_free_parameters <-
cfa(model,
data = DataCFA,
group = "Gender")                                                             # free parameters, group comparison
sink("CFA/CFA models/2a model0 free parameters.txt")
summary(model_0_free_parameters, fit.measures=TRUE)
sink()
model_0_free_parameters_men <-
cfa(model,
data = DataCFA[DataCFA$Gender == "Male",])                                    # free parameters
sink("CFA/CFA models/2b model0 free parameters men.txt")
summary(model_0_free_parameters_men, fit.measures=TRUE, standardized = TRUE)
sink()
model_0_free_parameters_men <-
cfa(model,
data = DataCFA[DataCFA$Gender == "Male",])                                    # free parameters
sink("CFA/CFA models/2b model0 free parameters men.txt")
summary(model_0_free_parameters_men, fit.measures=TRUE, standardized = TRUE)
sink()
View(DataCFA)
View(DataCFA)
cor(DataCFA[Gender == "Male"])
cor(DataCFA[DataCFA$Gender == "Male"])
cor(DataCFA[DataCFA$Gender == "Male",])
cor(DataCFA[DataCFA$Gender == "Male",-1])
cor(DataCFA[DataCFA$Gender == "Female",-1])
model2 <-
"ImpM=~ lam1*MM + lam2*MF
ImpW=~lam3*WM + lam4*WF"
model_0_free_parameters_men <-
cfa(model2,
data = DataCFA[DataCFA$Gender == "Male",])                                    # free parameters
summary(model_0_free_parameters_men, fit.measures=TRUE, standardized = TRUE)
model2 <-
"ImpM=~ lam1*MM + lam2*MF
ImpW=~lam3*WM + lam4*WF
ImpM~ImpW"
model_0_free_parameters_men <-
cfa(model2,
data = DataCFA[DataCFA$Gender == "Male",])                                    # free parameters
sink("CFA/CFA models/2b model0 free parameters men.txt")
summary(model_0_free_parameters_men, fit.measures=TRUE, standardized = TRUE)
sink()
summary(model_0_free_parameters_men, fit.measures=TRUE, standardized = TRUE)
library(lme4)
library(car)
library(effects)
model_1 <- lmer(log_rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
contrasts = list(block="contr.sum", condition = "contr.sum"))
Anova(model_1, type="III")
summary(model_1)
plot(effect("block:condition", model_1))
plot(effect("block:condition", model_1))
IAT_data <-
read.csv("example data.csv") %>%
filter(rt > 0) %>%  # log transformations require rts of 0 to be removed.
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
block = as.factor(block),
log_rt = log(rt))
setwd("/Users/Ian/git/linear mixed effects models/")
IAT_data <-
read.csv("example data.csv") %>%
filter(rt > 0) %>%  # log transformations require rts of 0 to be removed.
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
block = as.factor(block),
log_rt = log(rt))
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5) %>%
schoRsch::outlier(dv = "log_rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
IAT_data <-
read.csv("example data.csv") %>%
filter(rt > 0) %>%  # log transformations require rts of 0 to be removed.
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
block = as.factor(block),
log_rt = log(rt))
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5) %>%
schoRsch::outlier(dv = "log_rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
library(lme4)
library(car)
library(effects)
model_1 <- lmer(log_rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
contrasts = list(block="contr.sum", condition = "contr.sum"))
View(IAT_data_outliers_removed)
View(IAT_data_outliers_removed)
rm(list=ls())
library(plyr)
library(tidyverse)
library(data.table)
setwd("/Users/Ian/Dropbox/Work/Projects/Alphabet soup/Hussey & Hughes - Derivation study/OSF - Transitive relations and implicit attitudes/Experiment 3/Raw Data")
files <- list.files(pattern = "\\.csv$")
input_df <- dplyr::tbl_df(plyr::rbind.fill(lapply(files, data.table::fread, header = TRUE)))  # tbl_df() requires dplyr, rbind.fill() requires plyr, fread requires data.table
cleaned_df <-
input_df %>%
dplyr::select(subject,
date,
time,
blockcode,  # name of block
blocknum,
trialnum,
response,  # for string responses
correct,
latency,
trialcode) %>%
dplyr::rename(participant = subject,
block_name = blockcode,
block_n = blocknum,
trial_n = trialnum,
string_response = response,
accuracy = correct,
rt = latency) %>%
dplyr::mutate(participant = as.numeric(participant),
block_n = as.numeric(block_n),
trial_n = as.numeric(trial_n),
accuracy = as.numeric(accuracy),
rt = as.numeric(rt),
condition = ifelse(participant %% 2 == 1, 1, ifelse(participant %% 2 == 0, 2, NA)))  # condition was assigned based on odd/even participant code
inclusion_df <- read.csv("/Users/Ian/Dropbox/Work/Projects/Alphabet soup/Hussey & Hughes - Derivation study/OSF - Transitive relations and implicit attitudes/Experiment 3/Processed data/inclusion list.csv")
cleaned_df <- dplyr::inner_join(cleaned_df, inclusion_df, by = "participant")
IAT_data <-
cleaned_df %>%
dplyr::filter(block_name == "IAT_test_compatible_block" | block_name == "IAT_test_incompatible_block") %>%
dplyr::mutate(block = ifelse(block_name == "IAT_test_compatible_block", 1, 2)) %>%
dplyr::select(participant,
condition,
block,
trial_n,
rt,
accuracy)
IAT_data %>% write.csv(file = "/Users/Ian/git/linear mixed effects models/example data.csv", row.names = FALSE)
library(ez)
library(dplyr)
library(car)
library(schoRsch)
library(afex)  # stacks on top of lmer for p values, eta2 etc
library(BayesFactor)
library(simr) # for power calculations via powerSim
library(pim)
setwd("/Users/Ian/git/linear mixed effects models/")
IAT_data <-
read.csv("example data.csv") %>%
filter(rt > 0) %>%  # log transformations require rts of 0 to be removed.
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
block = as.factor(block),
log_rt = log(rt))
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5) %>%
schoRsch::outlier(dv = "log_rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
model_1 <- lmer(rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
contrasts = list(block="contr.sum", condition = "contr.sum"))
View(IAT_data_outliers_removed)
View(IAT_data_outliers_removed)
?contr.sum
ranef(model_1)
model_1 <- lmer(rt ~ block * condition + (1 | participant), # entering participant as a random effect acknowledges the non-independence of the multiple data points for each participant
data = IAT_data_outliers_removed,
contrasts = list(block="contr.sum", condition = "contr.sum"))
Anova(model_1, type="III")
?mixed
?pim
library(lme4)
library(car)
library(effects)
rm(list=ls())
# title: mixed effects models - linear frequentist, linear bayes factors
# author: Ian Hussey (ian.hussey@ugent.be)
# license:
#   code: GPLv3+        https://www.gnu.org/licenses/quick-guide-gplv3.en.html
#   data: CC BY 4.0     https://creativecommons.org/licenses/by/4.0/
#         please cite:  Hussey, I., & Hughes, S. (2016). Transitive relations and implicit attitudes. Dataset. osf.io/5nxby
# overview and purpose: combines data from experiments 1b and 2 to assess
# whether the IAT is sensitive to history of derivation with greater power.
# dependencies ------------------------------------------------------------
library(ez)
library(dplyr)
library(car)
library(schoRsch)
library(afex)  # stacks on top of lmer for p values, eta2 etc
library(BayesFactor)
library(simr) # for power calculations via powerSim
# data acquisition --------------------------------------------------------
# exp 1b
setwd("/Users/Ian/Dropbox/Work/Projects/Alphabet soup/Hussey & Hughes - Derivation study/OSF - Transitive relations and implicit attitudes/Experiment 1b/")
IAT_data_exp1b <-
read.csv("Processed data/long format data for mixed effects models.csv") %>%
filter(rt > 0) %>%  # log transformations require rts of 0 to be removed.
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
block = as.factor(block),
experiment = "1b",
participant = paste(participant, experiment, sep = "_"))  # participants require a unique identifier to seperate them across studies
# exp 2
setwd("/Users/Ian/Dropbox/Work/Projects/Alphabet soup/Hussey & Hughes - Derivation study/OSF - Transitive relations and implicit attitudes/Experiment 2/")
IAT_data_exp2 <-
read.csv("Processed data/long format data for mixed effects models.csv") %>%
filter(rt > 0) %>%  # log transformations require rts of 0 to be removed.
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
block = as.factor(block),
experiment = "2",
participant = paste(participant, experiment, sep = "_"))  # participants require a unique identifier to seperate them across studies
View(IAT_data_exp2)
View(IAT_data_exp2)
IAT_data <-
rbind(IAT_data_exp1b, IAT_data_exp2) %>%
mutate(participant = as.factor(participant),
condition = as.factor(condition),
block = as.factor(block),
experiment = as.factor(experiment))
sapply(IAT_data, class)
IAT_data <-
rbind(IAT_data_exp1b, IAT_data_exp2) %>%
mutate(participant = as.factor(participant),
condition = as.factor(condition),
block = as.factor(block),
experiment = as.factor(experiment),
accuracy = as.factor(accuracy))
sapply(IAT_data, class)
IAT_data_outliers_removed <-
IAT_data %>%
schoRsch::outlier(dv = "rt",
todo="elim",
upper.z = 2.5,
lower.z = -2.5)
View(IAT_data)
View(IAT_data)
setwd("/Users/Ian/git/linear mixed effects models/")
IAT_data <-
read.csv("sample data.csv") %>%
filter(rt > 0) %>%  # log transformations require rts of 0 to be removed.
mutate(block = ifelse(block == 1, "B1C1_block", "B1C2_block"),
condition = as.factor(ifelse(condition == 1, "IAT_first", "IAT_second")),
participant = as.factor(participant),
block = as.factor(block))
sapply(IAT_data, class)
sapply(IAT_data_outliers_removed, class)
